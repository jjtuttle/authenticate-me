{"ast":null,"code":"import Cookies from 'js-cookie';\nexport async function csrfFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET'; // set options.headers to an empty object if there is no headers\n\n  options.headers = options.headers || {}; // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the \n  // \"XSRF-TOKEN\" cookie\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  } // call the default window's fetch with the url and the options passed in\n\n\n  const res = await window.fetch(url, options); // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n\n  if (res.status >= 400) throw res; // if the response status code is under 400, then return the response to the\n  // next promise chain\n\n  return res;\n} //! ===========================================================================\n//! call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\n//! ===========================================================================\n\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}\n; //! ============================================================================","map":{"version":3,"sources":["/Users/jamestuttle/aa/Module-5-Resources/authenticate-me/frontend/src/store/csrf.js"],"names":["Cookies","csrfFetch","url","options","method","headers","toUpperCase","get","res","window","fetch","status","restoreCSRF"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,OAAO,eAAeC,SAAf,CAAyBC,GAAzB,EAA4C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACjD;AACAA,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,IAAkB,KAAnC,CAFiD,CAGjD;;AACAD,EAAAA,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,IAAmB,EAArC,CAJiD,CAMjD;AACE;AACA;;AACF,MAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,OAAiC,KAArC,EAA4C;AAC1CH,IAAAA,OAAO,CAACE,OAAR,CAAgB,cAAhB,IACEF,OAAO,CAACE,OAAR,CAAgB,cAAhB,KAAmC,kBADrC;AAEAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,YAAhB,IAAgCL,OAAO,CAACO,GAAR,CAAY,YAAZ,CAAhC;AACD,GAbgD,CAcjD;;;AACA,QAAMC,GAAG,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAaR,GAAb,EAAkBC,OAAlB,CAAlB,CAfiD,CAiBjD;AACE;;AACF,MAAIK,GAAG,CAACG,MAAJ,IAAc,GAAlB,EAAuB,MAAMH,GAAN,CAnB0B,CAqBjD;AACE;;AACF,SAAOA,GAAP;AACD,C,CAED;AACA;AACA;;AACA,OAAO,SAASI,WAAT,GAAuB;AAC5B,SAAOX,SAAS,CAAC,mBAAD,CAAhB;AACD;AAAA,C,CACD","sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the \n    // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n    // next promise chain\n  return res;\n}\n\n//! ===========================================================================\n//! call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\n//! ===========================================================================\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n};\n//! ============================================================================\n\n\n"]},"metadata":{},"sourceType":"module"}
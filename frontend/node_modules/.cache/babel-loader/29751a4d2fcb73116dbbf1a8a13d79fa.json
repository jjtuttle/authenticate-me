{"ast":null,"code":"import _asyncToGenerator from\"/Users/jamestuttle/aa/Module-5-Resources/authenticate-me/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/jamestuttle/aa/Module-5-Resources/authenticate-me/frontend/node_modules/@babel/runtime/regenerator/index.js\";import Cookies from'js-cookie';export function csrfFetch(_x){return _csrfFetch.apply(this,arguments);}//! ===========================================================================\n//! call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\n//! ===========================================================================\nfunction _csrfFetch(){_csrfFetch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){var options,res,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>1&&_args[1]!==undefined?_args[1]:{};// set options.method to 'GET' if there is no method\noptions.method=options.method||'GET';// set options.headers to an empty object if there is no headers\noptions.headers=options.headers||{};// if the options.method is not 'GET', then set the \"Content-Type\" header to\n// \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the \n// \"XSRF-TOKEN\" cookie\nif(options.method.toUpperCase()!=='GET'){options.headers['Content-Type']=options.headers['Content-Type']||'application/json';options.headers['XSRF-Token']=Cookies.get('XSRF-TOKEN');}// call the default window's fetch with the url and the options passed in\n_context.next=6;return window.fetch(url,options);case 6:res=_context.sent;if(!(res.status>=400)){_context.next=9;break;}throw res;case 9:return _context.abrupt(\"return\",res);case 10:case\"end\":return _context.stop();}}},_callee);}));return _csrfFetch.apply(this,arguments);}export function restoreCSRF(){return csrfFetch('/api/csrf/restore');};//! ============================================================================","map":{"version":3,"sources":["/Users/jamestuttle/aa/Module-5-Resources/authenticate-me/frontend/src/store/csrf.js"],"names":["Cookies","csrfFetch","url","options","method","headers","toUpperCase","get","window","fetch","res","status","restoreCSRF"],"mappings":"iTAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CAEA,eAAsBC,CAAAA,SAAtB,8CA0BA;AACA;AACA;yFA5BO,iBAAyBC,GAAzB,kJAA8BC,OAA9B,+CAAwC,EAAxC,CACL;AACAA,OAAO,CAACC,MAAR,CAAiBD,OAAO,CAACC,MAAR,EAAkB,KAAnC,CACA;AACAD,OAAO,CAACE,OAAR,CAAkBF,OAAO,CAACE,OAAR,EAAmB,EAArC,CAEA;AACE;AACA;AACF,GAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,KAAiC,KAArC,CAA4C,CAC1CH,OAAO,CAACE,OAAR,CAAgB,cAAhB,EACEF,OAAO,CAACE,OAAR,CAAgB,cAAhB,GAAmC,kBADrC,CAEAF,OAAO,CAACE,OAAR,CAAgB,YAAhB,EAAgCL,OAAO,CAACO,GAAR,CAAY,YAAZ,CAAhC,CACD,CACD;AAdK,sBAeaC,CAAAA,MAAM,CAACC,KAAP,CAAaP,GAAb,CAAkBC,OAAlB,CAfb,QAeCO,GAfD,oBAmBDA,GAAG,CAACC,MAAJ,EAAc,GAnBb,+BAmBwBD,CAAAA,GAnBxB,wCAuBEA,GAvBF,yD,4CA6BP,MAAO,SAASE,CAAAA,WAAT,EAAuB,CAC5B,MAAOX,CAAAA,SAAS,CAAC,mBAAD,CAAhB,CACD,EACD","sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the \n    // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n    // next promise chain\n  return res;\n}\n\n//! ===========================================================================\n//! call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\n//! ===========================================================================\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n};\n//! ============================================================================\n\n\n"]},"metadata":{},"sourceType":"module"}